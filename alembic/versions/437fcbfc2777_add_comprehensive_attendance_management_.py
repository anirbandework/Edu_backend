"""Add comprehensive attendance management system

Revision ID: 437fcbfc2777
Revises: dce8cb71ac3c
Create Date: 2025-10-15 03:06:50.240393

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '437fcbfc2777'
down_revision: Union[str, None] = 'dce8cb71ac3c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('attendance_alerts',
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('user_type', sa.Enum('STUDENT', 'TEACHER', 'SCHOOL_AUTHORITY', 'STAFF', name='usertype'), nullable=False),
    sa.Column('alert_type', sa.String(length=50), nullable=False),
    sa.Column('alert_level', sa.String(length=20), nullable=True),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('trigger_data', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('threshold_value', sa.Integer(), nullable=True),
    sa.Column('current_value', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('acknowledged_by', sa.UUID(), nullable=True),
    sa.Column('acknowledged_at', sa.DateTime(), nullable=True),
    sa.Column('resolved_at', sa.DateTime(), nullable=True),
    sa.Column('academic_year', sa.String(length=10), nullable=False),
    sa.Column('class_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_attendance_alerts_id'), 'attendance_alerts', ['id'], unique=False)
    op.create_index(op.f('ix_attendance_alerts_tenant_id'), 'attendance_alerts', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_attendance_alerts_user_id'), 'attendance_alerts', ['user_id'], unique=False)
    op.create_table('attendance_policies',
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=False),
    sa.Column('policy_name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('user_type', sa.Enum('STUDENT', 'TEACHER', 'SCHOOL_AUTHORITY', 'STAFF', name='usertype'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('school_start_time', sa.Time(), nullable=True),
    sa.Column('school_end_time', sa.Time(), nullable=True),
    sa.Column('lunch_start_time', sa.Time(), nullable=True),
    sa.Column('lunch_end_time', sa.Time(), nullable=True),
    sa.Column('office_start_time', sa.Time(), nullable=True),
    sa.Column('office_end_time', sa.Time(), nullable=True),
    sa.Column('minimum_working_hours', sa.Integer(), nullable=True),
    sa.Column('late_threshold_minutes', sa.Integer(), nullable=True),
    sa.Column('grace_period_minutes', sa.Integer(), nullable=True),
    sa.Column('early_departure_threshold', sa.Integer(), nullable=True),
    sa.Column('minimum_attendance_percentage', sa.Integer(), nullable=True),
    sa.Column('consecutive_absent_alert', sa.Integer(), nullable=True),
    sa.Column('monthly_absent_limit', sa.Integer(), nullable=True),
    sa.Column('sick_leave_limit_per_month', sa.Integer(), nullable=True),
    sa.Column('casual_leave_limit_per_month', sa.Integer(), nullable=True),
    sa.Column('requires_medical_certificate_after_days', sa.Integer(), nullable=True),
    sa.Column('notify_parents_after_absent_days', sa.Integer(), nullable=True),
    sa.Column('notify_administration_after_days', sa.Integer(), nullable=True),
    sa.Column('send_daily_summary', sa.Boolean(), nullable=True),
    sa.Column('send_weekly_report', sa.Boolean(), nullable=True),
    sa.Column('enable_location_tracking', sa.Boolean(), nullable=True),
    sa.Column('allowed_radius_meters', sa.Integer(), nullable=True),
    sa.Column('school_latitude', sa.String(length=20), nullable=True),
    sa.Column('school_longitude', sa.String(length=20), nullable=True),
    sa.Column('academic_year', sa.String(length=10), nullable=False),
    sa.Column('effective_from', sa.DateTime(), nullable=False),
    sa.Column('effective_until', sa.DateTime(), nullable=True),
    sa.Column('allow_retroactive_marking', sa.Boolean(), nullable=True),
    sa.Column('retroactive_days_limit', sa.Integer(), nullable=True),
    sa.Column('require_approval_for_excused', sa.Boolean(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_attendance_policies_id'), 'attendance_policies', ['id'], unique=False)
    op.create_index(op.f('ix_attendance_policies_tenant_id'), 'attendance_policies', ['tenant_id'], unique=False)
    op.create_table('attendance_reports',
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('generated_by', sa.UUID(), nullable=False),
    sa.Column('generated_by_type', sa.Enum('STUDENT', 'TEACHER', 'SCHOOL_AUTHORITY', 'STAFF', name='usertype'), nullable=False),
    sa.Column('report_name', sa.String(length=100), nullable=False),
    sa.Column('report_type', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=False),
    sa.Column('user_type_filter', sa.Enum('STUDENT', 'TEACHER', 'SCHOOL_AUTHORITY', 'STAFF', name='usertype'), nullable=True),
    sa.Column('class_ids', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('user_ids', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('report_data', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('summary_stats', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('file_path', sa.String(length=500), nullable=True),
    sa.Column('file_format', sa.String(length=10), nullable=True),
    sa.Column('requested_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_attendance_reports_id'), 'attendance_reports', ['id'], unique=False)
    op.create_index(op.f('ix_attendance_reports_tenant_id'), 'attendance_reports', ['tenant_id'], unique=False)
    op.create_table('attendance_summaries',
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('user_type', sa.Enum('STUDENT', 'TEACHER', 'SCHOOL_AUTHORITY', 'STAFF', name='usertype'), nullable=False),
    sa.Column('class_id', sa.UUID(), nullable=True),
    sa.Column('summary_type', sa.String(length=20), nullable=False),
    sa.Column('period_start', sa.Date(), nullable=False),
    sa.Column('period_end', sa.Date(), nullable=False),
    sa.Column('academic_year', sa.String(length=10), nullable=False),
    sa.Column('total_days', sa.Integer(), nullable=True),
    sa.Column('working_days', sa.Integer(), nullable=True),
    sa.Column('present_days', sa.Integer(), nullable=True),
    sa.Column('absent_days', sa.Integer(), nullable=True),
    sa.Column('late_days', sa.Integer(), nullable=True),
    sa.Column('excused_days', sa.Integer(), nullable=True),
    sa.Column('sick_days', sa.Integer(), nullable=True),
    sa.Column('early_departure_days', sa.Integer(), nullable=True),
    sa.Column('total_hours_present', sa.Integer(), nullable=True),
    sa.Column('average_check_in_time', sa.Time(), nullable=True),
    sa.Column('average_check_out_time', sa.Time(), nullable=True),
    sa.Column('attendance_percentage', sa.Integer(), nullable=True),
    sa.Column('punctuality_percentage', sa.Integer(), nullable=True),
    sa.Column('is_below_threshold', sa.Boolean(), nullable=True),
    sa.Column('requires_attention', sa.Boolean(), nullable=True),
    sa.Column('last_calculated', sa.DateTime(), nullable=True),
    sa.Column('calculation_method', sa.String(length=20), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_attendance_summaries_class_id'), 'attendance_summaries', ['class_id'], unique=False)
    op.create_index(op.f('ix_attendance_summaries_id'), 'attendance_summaries', ['id'], unique=False)
    op.create_index(op.f('ix_attendance_summaries_tenant_id'), 'attendance_summaries', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_attendance_summaries_user_id'), 'attendance_summaries', ['user_id'], unique=False)
    op.create_table('attendances',
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('user_type', sa.Enum('STUDENT', 'TEACHER', 'SCHOOL_AUTHORITY', 'STAFF', name='usertype'), nullable=False),
    sa.Column('class_id', sa.UUID(), nullable=True),
    sa.Column('marked_by', sa.UUID(), nullable=False),
    sa.Column('marked_by_type', sa.Enum('STUDENT', 'TEACHER', 'SCHOOL_AUTHORITY', 'STAFF', name='usertype'), nullable=False),
    sa.Column('attendance_date', sa.Date(), nullable=False),
    sa.Column('attendance_time', sa.DateTime(), nullable=False),
    sa.Column('attendance_type', sa.Enum('DAILY', 'PERIOD', 'EVENT', 'EXAM', 'ASSEMBLY', 'EXTRACURRICULAR', name='attendancetype'), nullable=False),
    sa.Column('attendance_mode', sa.Enum('MANUAL', 'BIOMETRIC', 'QR_CODE', 'MOBILE_APP', 'RFID', name='attendancemode'), nullable=False),
    sa.Column('status', sa.Enum('PRESENT', 'ABSENT', 'LATE', 'EXCUSED', 'SICK', 'PARTIAL', 'EARLY_DEPARTURE', 'SUSPENDED', name='attendancestatus'), nullable=False),
    sa.Column('check_in_time', sa.Time(), nullable=True),
    sa.Column('check_out_time', sa.Time(), nullable=True),
    sa.Column('expected_check_in', sa.Time(), nullable=True),
    sa.Column('expected_check_out', sa.Time(), nullable=True),
    sa.Column('actual_hours', sa.Integer(), nullable=True),
    sa.Column('period_number', sa.Integer(), nullable=True),
    sa.Column('subject_id', sa.UUID(), nullable=True),
    sa.Column('subject_name', sa.String(length=100), nullable=True),
    sa.Column('location', sa.String(length=100), nullable=True),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.Column('reason_for_absence', sa.String(length=500), nullable=True),
    sa.Column('is_excused', sa.Boolean(), nullable=True),
    sa.Column('approved_by', sa.UUID(), nullable=True),
    sa.Column('approved_by_type', sa.Enum('STUDENT', 'TEACHER', 'SCHOOL_AUTHORITY', 'STAFF', name='usertype'), nullable=True),
    sa.Column('approval_date', sa.DateTime(), nullable=True),
    sa.Column('approval_remarks', sa.Text(), nullable=True),
    sa.Column('academic_year', sa.String(length=10), nullable=False),
    sa.Column('term', sa.String(length=20), nullable=True),
    sa.Column('week_number', sa.Integer(), nullable=True),
    sa.Column('semester', sa.String(length=20), nullable=True),
    sa.Column('latitude', sa.String(length=20), nullable=True),
    sa.Column('longitude', sa.String(length=20), nullable=True),
    sa.Column('location_accuracy', sa.Integer(), nullable=True),
    sa.Column('device_info', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('batch_id', sa.UUID(), nullable=True),
    sa.Column('import_source', sa.String(length=50), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_attendances_academic_year'), 'attendances', ['academic_year'], unique=False)
    op.create_index(op.f('ix_attendances_attendance_date'), 'attendances', ['attendance_date'], unique=False)
    op.create_index(op.f('ix_attendances_class_id'), 'attendances', ['class_id'], unique=False)
    op.create_index(op.f('ix_attendances_id'), 'attendances', ['id'], unique=False)
    op.create_index(op.f('ix_attendances_marked_by'), 'attendances', ['marked_by'], unique=False)
    op.create_index(op.f('ix_attendances_tenant_id'), 'attendances', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_attendances_user_id'), 'attendances', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_attendances_user_id'), table_name='attendances')
    op.drop_index(op.f('ix_attendances_tenant_id'), table_name='attendances')
    op.drop_index(op.f('ix_attendances_marked_by'), table_name='attendances')
    op.drop_index(op.f('ix_attendances_id'), table_name='attendances')
    op.drop_index(op.f('ix_attendances_class_id'), table_name='attendances')
    op.drop_index(op.f('ix_attendances_attendance_date'), table_name='attendances')
    op.drop_index(op.f('ix_attendances_academic_year'), table_name='attendances')
    op.drop_table('attendances')
    op.drop_index(op.f('ix_attendance_summaries_user_id'), table_name='attendance_summaries')
    op.drop_index(op.f('ix_attendance_summaries_tenant_id'), table_name='attendance_summaries')
    op.drop_index(op.f('ix_attendance_summaries_id'), table_name='attendance_summaries')
    op.drop_index(op.f('ix_attendance_summaries_class_id'), table_name='attendance_summaries')
    op.drop_table('attendance_summaries')
    op.drop_index(op.f('ix_attendance_reports_tenant_id'), table_name='attendance_reports')
    op.drop_index(op.f('ix_attendance_reports_id'), table_name='attendance_reports')
    op.drop_table('attendance_reports')
    op.drop_index(op.f('ix_attendance_policies_tenant_id'), table_name='attendance_policies')
    op.drop_index(op.f('ix_attendance_policies_id'), table_name='attendance_policies')
    op.drop_table('attendance_policies')
    op.drop_index(op.f('ix_attendance_alerts_user_id'), table_name='attendance_alerts')
    op.drop_index(op.f('ix_attendance_alerts_tenant_id'), table_name='attendance_alerts')
    op.drop_index(op.f('ix_attendance_alerts_id'), table_name='attendance_alerts')
    op.drop_table('attendance_alerts')
    # ### end Alembic commands ###
